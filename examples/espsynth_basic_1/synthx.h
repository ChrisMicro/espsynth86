#ifndef SYNTHTEST_H
#define SYNTHTEST_H
#include "Synth.h"
#include "Modules.h"


class SynthTest : public Synth
{
    public:
    ModuleConstant param[8];

    SynthTest()
    {
    
        //Define Node Objects
  ModuleSamplePlayer *moduleSamplePlayer_1 = new ModuleSamplePlayer();
  ModuleClockDivider *moduleClockDivider_1 = new ModuleClockDivider();
  ModuleClockDivider *moduleClockDivider_2 = new ModuleClockDivider();
  ModuleClockDivider *moduleClockDivider_3 = new ModuleClockDivider();
  ModuleSamplePlayer *moduleSamplePlayer_2 = new ModuleSamplePlayer();
  ModuleSamplePlayer *moduleSamplePlayer_3 = new ModuleSamplePlayer();
  ModuleMixer3 *moduleMixer3_1 = new ModuleMixer3();
  ModuleBitReducer *moduleBitReducer_1 = new ModuleBitReducer();
  ModuleClock *moduleClock_1 = new ModuleClock(1,50);

  moduleSamplePlayer_1->sample_select = new ModuleConstant(64);
  moduleSamplePlayer_2->sample_select = new ModuleConstant(128);
  moduleSamplePlayer_3->sample_select = new ModuleConstant(256);
  moduleClockDivider_1->clock_input=moduleClock_1;
  moduleSamplePlayer_1->trigger_input=moduleClockDivider_1;
  moduleClockDivider_1->division_input= &param[0];
  moduleClockDivider_2->clock_input=moduleClock_1;
  moduleClockDivider_2->division_input= &param[1];
  moduleClockDivider_3->division_input= &param[2];
  moduleClockDivider_3->clock_input=moduleClock_1;
  moduleSamplePlayer_2->trigger_input=moduleClockDivider_2;
  moduleSamplePlayer_3->trigger_input=moduleClockDivider_3;
  moduleMixer3_1->ch1=moduleSamplePlayer_1;
  moduleMixer3_1->ch2=moduleSamplePlayer_2;
  moduleMixer3_1->ch3=moduleSamplePlayer_3;
  moduleBitReducer_1->audio_input=moduleMixer3_1;
  moduleBitReducer_1->bit_input= &param[3];


  this->last_module = moduleBitReducer_1;
        
    }
};
#endif // SYNTHTEST_H    


/* 

This is espnode86 stuff do not edit

--BEGINESPNODEPATCH--
djIuMS4xCm5ldHdvcmsvYWRkLXBhdGNoIHNhZDQgcm9vdApwYXRjaC9vcGVuIHNhZDQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB1M2o3IGVzcG5vZGUvbm9kZWxpc3QgTm9kZSUyMFBhbGxldGUKbm9kZS90dXJuLW9uIHUzajcKcGF0Y2gvYWRkLW5vZGUgc2FkNCBqNnd3
IHNhbXBsZXIvc2FtcGxlcGxheWVyIFNhbXBsZSUyMFBsYXllcgpub2RlL3R1cm4tb24gajZ3dwpub2RlL2FkZC1pbmxldCBqNnd3IHAycWcgZXNwbm9kZS9zdHJpbmcgdHJpZ2dlcl9pbnB1dCB0cmlnZ2VyX2lucHV0Cm5vZGUvYWRkLWlubGV0IGo2d3cgbzNvcCBl
c3Bub2RlL3N0cmluZyBzYW1wbGVfc2VsZWN0IHNhbXBsZV9zZWxlY3QKbm9kZS9hZGQtb3V0bGV0IGo2d3cgbzBkayBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgdGNidCB0aW1pbmcvY2xvY2sgQ2xvY2slMjBHZW4Kbm9kZS90dXJu
LW9uIHRjYnQKbm9kZS9hZGQtaW5sZXQgdGNidCBtMWJuIGVzcG5vZGUvc3RyaW5nIGJwbSBicG0Kbm9kZS9hZGQtaW5sZXQgdGNidCBncTQyIGVzcG5vZGUvc3RyaW5nIGRpdmlzaW9uIGRpdmlzaW9uCm5vZGUvYWRkLW91dGxldCB0Y2J0IHN5bTUgZXNwbm9kZS9z
dHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IG9tcTIgdGltaW5nL2Nsb2NrZGl2aWRlciBDbG9jayUyMERpdmlkZXIKbm9kZS90dXJuLW9uIG9tcTIKbm9kZS9hZGQtaW5sZXQgb21xMiBwNGZ0IGVzcG5vZGUvc3RyaW5nIGNsb2NrX2lucHV0IGNsb2Nr
X2lucHV0Cm5vZGUvYWRkLWlubGV0IG9tcTIgcmM2ZiBlc3Bub2RlL3N0cmluZyBkaXZpc2lvbl9pbnB1dCBkaXZpc2lvbl9pbnB1dApub2RlL2FkZC1vdXRsZXQgb21xMiAwMjA5IGVzcG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCA0bjg2
IGlucHV0L211bHRpcGxleGVyIE11bHRpcGxleGVyCm5vZGUvdHVybi1vbiA0bjg2Cm5vZGUvYWRkLW91dGxldCA0bjg2IGh2N3ggZXNwbm9kZS9zdHJpbmcgUG90MSBQb3QxCm5vZGUvYWRkLW91dGxldCA0bjg2IGo2Z3cgZXNwbm9kZS9zdHJpbmcgUG90MiBQb3Qy
Cm5vZGUvYWRkLW91dGxldCA0bjg2IHlmdzEgZXNwbm9kZS9zdHJpbmcgUG90MyBQb3QzCm5vZGUvYWRkLW91dGxldCA0bjg2IDk1ZTggZXNwbm9kZS9zdHJpbmcgUG90NCBQb3Q0Cm5vZGUvYWRkLW91dGxldCA0bjg2IHljejggZXNwbm9kZS9zdHJpbmcgUG90NSBQ
b3Q1Cm5vZGUvYWRkLW91dGxldCA0bjg2IGR2bG0gZXNwbm9kZS9zdHJpbmcgUG90NiBQb3Q2Cm5vZGUvYWRkLW91dGxldCA0bjg2IGR5dzEgZXNwbm9kZS9zdHJpbmcgUG90NyBQb3Q3Cm5vZGUvYWRkLW91dGxldCA0bjg2IHU0Y3ggZXNwbm9kZS9zdHJpbmcgUG90
OCBQb3Q4CnBhdGNoL2FkZC1ub2RlIHNhZDQgbHB0ciB0aW1pbmcvY2xvY2tkaXZpZGVyIENsb2NrJTIwRGl2aWRlcgpub2RlL3R1cm4tb24gbHB0cgpub2RlL2FkZC1pbmxldCBscHRyIG9yMGwgZXNwbm9kZS9zdHJpbmcgY2xvY2tfaW5wdXQgY2xvY2tfaW5wdXQK
bm9kZS9hZGQtaW5sZXQgbHB0ciA3dmp1IGVzcG5vZGUvc3RyaW5nIGRpdmlzaW9uX2lucHV0IGRpdmlzaW9uX2lucHV0Cm5vZGUvYWRkLW91dGxldCBscHRyIGlmZmEgZXNwbm9kZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IDg0dGQgdGltaW5n
L2Nsb2NrZGl2aWRlciBDbG9jayUyMERpdmlkZXIKbm9kZS90dXJuLW9uIDg0dGQKbm9kZS9hZGQtaW5sZXQgODR0ZCB0M2JpIGVzcG5vZGUvc3RyaW5nIGNsb2NrX2lucHV0IGNsb2NrX2lucHV0Cm5vZGUvYWRkLWlubGV0IDg0dGQgNmhpayBlc3Bub2RlL3N0cmlu
ZyBkaXZpc2lvbl9pbnB1dCBkaXZpc2lvbl9pbnB1dApub2RlL2FkZC1vdXRsZXQgODR0ZCBid240IGVzcG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBldWhoIHNhbXBsZXIvc2FtcGxlcGxheWVyIFNhbXBsZSUyMFBsYXllcgpub2RlL3R1
cm4tb24gZXVoaApub2RlL2FkZC1pbmxldCBldWhoIHdhODIgZXNwbm9kZS9zdHJpbmcgdHJpZ2dlcl9pbnB1dCB0cmlnZ2VyX2lucHV0Cm5vZGUvYWRkLWlubGV0IGV1aGggcjNlNiBlc3Bub2RlL3N0cmluZyBzYW1wbGVfc2VsZWN0IHNhbXBsZV9zZWxlY3QKbm9k
ZS9hZGQtb3V0bGV0IGV1aGggdmRwayBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgN2JtMCBzYW1wbGVyL3NhbXBsZXBsYXllciBTYW1wbGUlMjBQbGF5ZXIKbm9kZS90dXJuLW9uIDdibTAKbm9kZS9hZGQtaW5sZXQgN2JtMCB0M3pq
IGVzcG5vZGUvc3RyaW5nIHRyaWdnZXJfaW5wdXQgdHJpZ2dlcl9pbnB1dApub2RlL2FkZC1pbmxldCA3Ym0wIGNnazggZXNwbm9kZS9zdHJpbmcgc2FtcGxlX3NlbGVjdCBzYW1wbGVfc2VsZWN0Cm5vZGUvYWRkLW91dGxldCA3Ym0wIHgzeWkgZXNwbm9kZS9zdHJp
bmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IDhmYnUgc2lnbmFsL21peGVyMyAzJTIwQ2glMjBNaXhlcgpub2RlL3R1cm4tb24gOGZidQpub2RlL2FkZC1pbmxldCA4ZmJ1IGliMjIgZXNwbm9kZS9zdHJpbmcgY2gxIGNoMQpub2RlL2FkZC1pbmxldCA4ZmJ1
IDI4N3UgZXNwbm9kZS9zdHJpbmcgY2gyIGNoMgpub2RlL2FkZC1pbmxldCA4ZmJ1IHJuMzcgZXNwbm9kZS9zdHJpbmcgY2gzIGNoMwpub2RlL2FkZC1vdXRsZXQgOGZidSA4NDViIGVzcG5vZGUvc3RyaW5nIE91dCBPdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBvbmRn
IG91dHB1dC9kYWMgQXVkaW8lMjBEQUMKbm9kZS90dXJuLW9uIG9uZGcKbm9kZS9hZGQtaW5sZXQgb25kZyBndDFmIGVzcG5vZGUvc3RyaW5nIGF1ZGlvX2lucHV0IGF1ZGlvX2lucHV0CnBhdGNoL2FkZC1ub2RlIHNhZDQgMHI4ciBpbnB1dC9jb25zdGFudCBDb25z
dGFudApub2RlL3R1cm4tb24gMHI4cgpub2RlL2FkZC1pbmxldCAwcjhyIHJ4encgZXNwbm9kZS9zdHJpbmcgdXNlci12YWx1ZSB1c2VyLXZhbHVlCm5vZGUvYWRkLW91dGxldCAwcjhyIDVxbXogZXNwbm9kZS9zdHJpbmcgbnVtYmVyIG51bWJlcgpwYXRjaC9hZGQt
bm9kZSBzYWQ0IHhuNXMgaW5wdXQvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIHhuNXMKbm9kZS9hZGQtaW5sZXQgeG41cyA2NDJkIGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgeG41cyA3aml3IGVzcG5v
ZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCBjejBqIGlucHV0L2NvbnN0YW50IENvbnN0YW50Cm5vZGUvdHVybi1vbiBjejBqCm5vZGUvYWRkLWlubGV0IGN6MGogdXJoNCBlc3Bub2RlL3N0cmluZyB1c2VyLXZhbHVlIHVzZXItdmFs
dWUKbm9kZS9hZGQtb3V0bGV0IGN6MGogaGw5YSBlc3Bub2RlL3N0cmluZyBudW1iZXIgbnVtYmVyCnBhdGNoL2FkZC1ub2RlIHNhZDQgN3M5dCBmaWx0ZXIvYml0Y3J1c2hlciBCaXQlMjBDcnVzaGVyCm5vZGUvdHVybi1vbiA3czl0Cm5vZGUvYWRkLWlubGV0IDdz
OXQgZ2Y1ciBlc3Bub2RlL3N0cmluZyBhdWRpb19pbnB1dCBhdWRpb19pbnB1dApub2RlL2FkZC1pbmxldCA3czl0IHdwY2cgZXNwbm9kZS9zdHJpbmcgYml0X2lucHV0IGJpdF9pbnB1dApub2RlL2FkZC1vdXRsZXQgN3M5dCB5Y2Q5IGVzcG5vZGUvc3RyaW5nIE91
dCBPdXQKbm9kZS9tb3ZlIHUzajcgMzAgMjAKbm9kZS9tb3ZlIGo2d3cgNzk4IDEzMQpub2RlL21vdmUgdGNidCAyNTUgNzIKbm9kZS9tb3ZlIG9tcTIgNTcwIDEyNwpub2RlL21vdmUgNG44NiAzMDIgMjAyCm5vZGUvbW92ZSBscHRyIDU3MSAyMzAKbm9kZS9tb3Zl
IDg0dGQgNTY3IDMzNwpub2RlL21vdmUgZXVoaCA4MTEgMjQzCm5vZGUvbW92ZSA3Ym0wIDgwMSAzNDgKbm9kZS9tb3ZlIDhmYnUgMTA1NiAyMjYKbm9kZS9tb3ZlIG9uZGcgMTMwMCAyMzkKbm9kZS9tb3ZlIDByOHIgNzQyIDUwOQpub2RlL21vdmUgeG41cyA3NDgg
NjEzCm5vZGUvbW92ZSBjejBqIDU3NSA0OTkKbm9kZS9tb3ZlIDdzOXQgMTE4MiAzNjAKb3V0bGV0L2Nvbm5lY3Qgc3ltNSBwNGZ0IGsyMDEKb3V0bGV0L2Nvbm5lY3QgMDIwOSBwMnFnIHRjam0Kb3V0bGV0L2Nvbm5lY3QgaHY3eCByYzZmIHR2OXIKb3V0bGV0L2Nv
bm5lY3Qgc3ltNSBvcjBsIHV4ZWwKb3V0bGV0L2Nvbm5lY3QgajZndyA3dmp1IDEzeTUKb3V0bGV0L2Nvbm5lY3QgeWZ3MSA2aGlrIHJiYnAKb3V0bGV0L2Nvbm5lY3Qgc3ltNSB0M2JpIDhxazYKb3V0bGV0L2Nvbm5lY3QgaWZmYSB3YTgyIG45ZXMKb3V0bGV0L2Nv
bm5lY3QgYnduNCB0M3pqIG1oMzkKb3V0bGV0L2Nvbm5lY3QgbzBkayBpYjIyIDh2ZjAKb3V0bGV0L2Nvbm5lY3QgdmRwayAyODd1IHMxcTAKb3V0bGV0L2Nvbm5lY3QgeDN5aSBybjM3IGliaXgKb3V0bGV0L2Nvbm5lY3QgaGw5YSBvM29wIHo4N28Kb3V0bGV0L2Nv
bm5lY3QgNXFteiByM2U2IGJrZmIKb3V0bGV0L2Nvbm5lY3QgN2ppdyBjZ2s4IDZ3N2oKb3V0bGV0L2Nvbm5lY3QgODQ1YiBnZjVyIGJzejAKb3V0bGV0L2Nvbm5lY3QgeWNkOSBndDFmIGJ1cmgKb3V0bGV0L2Nvbm5lY3QgOTVlOCB3cGNnIGRoN3UKbm9kZS91cGRh
dGUtaW5sZXQgajZ3dyBwMnFnIHRyaWdnZXJfaW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCBqNnd3IG8zb3Agc2FtcGxlX3NlbGVjdCA2NApub2RlL3VwZGF0ZS1pbmxldCB0Y2J0IG0xYm4gYnBtIDEKbm9kZS91cGRhdGUtaW5sZXQgdGNidCBncTQyIGRpdmlzaW9u
IDUwCm5vZGUvdXBkYXRlLWlubGV0IG9tcTIgcDRmdCBjbG9ja19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IG9tcTIgcmM2ZiBkaXZpc2lvbl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGxwdHIgb3IwbCBjbG9ja19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0
IGxwdHIgN3ZqdSBkaXZpc2lvbl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDg0dGQgdDNiaSBjbG9ja19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDg0dGQgNmhpayBkaXZpc2lvbl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGV1aGggd2E4MiB0cmlnZ2Vy
X2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgZXVoaCByM2U2IHNhbXBsZV9zZWxlY3QgMTI4Cm5vZGUvdXBkYXRlLWlubGV0IDdibTAgdDN6aiB0cmlnZ2VyX2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgN2JtMCBjZ2s4IHNhbXBsZV9zZWxlY3QgMjU2Cm5vZGUv
dXBkYXRlLWlubGV0IG9uZGcgZ3QxZiBhdWRpb19pbnB1dCAwCm5vZGUvdXBkYXRlLW91dGxldCAwcjhyIDVxbXogbnVtYmVyIDEyOApub2RlL3VwZGF0ZS1pbmxldCAwcjhyIHJ4encgdXNlci12YWx1ZSAxMjgKbm9kZS91cGRhdGUtb3V0bGV0IHhuNXMgN2ppdyBu
dW1iZXIgMjU2Cm5vZGUvdXBkYXRlLWlubGV0IHhuNXMgNjQyZCB1c2VyLXZhbHVlIDI1Ngpub2RlL3VwZGF0ZS1vdXRsZXQgY3owaiBobDlhIG51bWJlciA2NApub2RlL3VwZGF0ZS1pbmxldCBjejBqIHVyaDQgdXNlci12YWx1ZSA2NApub2RlL3VwZGF0ZS1pbmxl
dCA3czl0IGdmNXIgYXVkaW9faW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCA3czl0IHdwY2cgYml0X2lucHV0IDA=
--ENDESPNODEPATCH--

*/
